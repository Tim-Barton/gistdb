// Code generated by MockGen. DO NOT EDIT.
// Source: gistdb (interfaces: GithubGists)

// Package mock_gistdb is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
)

// MockGithubGists is a mock of GithubGists interface.
type MockGithubGists struct {
	ctrl     *gomock.Controller
	recorder *MockGithubGistsMockRecorder
}

// MockGithubGistsMockRecorder is the mock recorder for MockGithubGists.
type MockGithubGistsMockRecorder struct {
	mock *MockGithubGists
}

// NewMockGithubGists creates a new mock instance.
func NewMockGithubGists(ctrl *gomock.Controller) *MockGithubGists {
	mock := &MockGithubGists{ctrl: ctrl}
	mock.recorder = &MockGithubGistsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubGists) EXPECT() *MockGithubGistsMockRecorder {
	return m.recorder
}

// Edit mocks base method.
func (m *MockGithubGists) Edit(arg0 context.Context, arg1 string, arg2 *github.Gist) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockGithubGistsMockRecorder) Edit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockGithubGists)(nil).Edit), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockGithubGists) Get(arg0 context.Context, arg1 string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGithubGistsMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGithubGists)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockGithubGists) List(arg0 context.Context, arg1 string, arg2 *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGithubGistsMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGithubGists)(nil).List), arg0, arg1, arg2)
}
